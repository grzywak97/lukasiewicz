<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/css/style.css"/>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <title>KRZ application</title>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand">Klasyczny Rachunek Zdań</a>
        <div class="collapse navbar-collapse">
            <div class="navbar-nav">
        </div>
    </nav>
     <div class="container">
         <div class="jumbotron mt-3 text-center">
            <div class="alert alert-warning alert"><b>Uwaga:</b> Nie używaj spacji w wyrażeniu</div>

            <h1 class="lead" style="font-size:8vmin">Notacja Łukasiewicza w Klasycznym Rachunku Zdań</h1>
            <p class="lead">Aplikacja, która konwertuje wyrażenie z postaci nawiasowej do postaci beznawiasowej (Łukasiewicza) i vice versa</p>
            <hr class="my-4">
            <p>1. Wprowadź wyrażenie do pola tekstowego, do pomocy posłużą przyciski poniżej.</p>
            <p>2. Wybierz, która notacja została wprowadzona.</p>
            <p>3. Naciśnij Konwertuj.</p>
            <div>
                <label for="expression">
                    <p>Wpisz wyrażenie poniżej bez spacji! <br>
                        <small>
                            format: (¬p∧q)⇒r lub CKNpqr
                        </small>
                    </p>
                    <input type="text" class="form-control form-control-lg" name="expression" id="expression"><br>
                    <label class="radio-inline"><input type="radio" name="optradio" id="test" checked> Notacja nawiasowa</label>
                    <label class="radio-inline"><input type="radio" name="optradio" id="test2"> Notacja beznawiasowa</label>
                    <hr>
                    <button class="btn btn-primary btn-lg" id="negacja" role="button" style="width: 60px;" onclick="negacja()">¬</button>
                    <button class="btn btn-primary btn-lg" id="koniunkcja" role="button" style="width: 60px;" onclick="koniunkcja()">∧</button>
                    <button class="btn btn-primary btn-lg" id="alternatywa" role="button" style="width: 60px;" onclick="alternatywa()">∨</button>
                    <button class="btn btn-primary btn-lg" id="implikacja" role="button" style="width: 60px;" onclick="implikacja()">⇒</button>
                    <button class="btn btn-primary btn-lg" id="rownowaznosc" role="button" style="width: 60px;" onclick="rownowaznosc()">⇔</button>
                    <hr>
                    <button class="btn btn-primary btn-lg" id="convert" role="button" onclick="wybor()">Konwertuj</button>
                    <div id="result">
                        <hr>
                    </div>

                    <script type="text/javascript">

                    function negacja(){
                        let dane = document.getElementById("expression").value;
                        dane = dane+'¬';
                        document.getElementById("expression").value = dane;
                        document.getElementById("expression").focus();
                    }

                    function koniunkcja(){
                        let dane = document.getElementById("expression").value;
                        dane = dane+'∧';
                        document.getElementById("expression").value = dane;
                        document.getElementById("expression").focus();
                    }

                    function alternatywa(){
                        let dane = document.getElementById("expression").value;
                        dane = dane+'∨';
                        document.getElementById("expression").value = dane;
                        document.getElementById("expression").focus();
                    }

                    function implikacja(){
                        let dane = document.getElementById("expression").value;
                        dane = dane+'⇒';
                        document.getElementById("expression").value = dane;
                        document.getElementById("expression").focus();
                    }

                    function rownowaznosc(){
                        let dane = document.getElementById("expression").value;
                        dane = dane+'⇔';
                        document.getElementById("expression").value = dane;
                        document.getElementById("expression").focus();
                    }

                    function wybor(){

                        if(document.getElementById("test").checked){
                            console.log("notacja nawiasowa");
                            test();
                        }
                        else{
                            console.log("notacja Łukasiewicza");
                            test2();
                        }
                        
                    }

                    function test(){
                        document.getElementById("row").style.visibility="visible";
                        let expr = document.getElementById("expression").value; //pobrane wyrażenie z pola
                        let prefix = []; //tablica z gotowym wyrażeniem
                        let stack = []; //stos
                        let table = '<div class="col-md-12"><table class="table table-striped table-bordered"><thead class= "thead-dark text-left"><tr><th scope="col">Lp.</th><th scope="col">Wejście</th><th scope="col">Stos</th><th scope="col">Wyjście</th></tr></thead><tbody id="tabeladata" class="text-left">'; //zmienna do budowania tabeli
                        let table_help = '' //zmienna pomocnicza do budowania tabeli
                        let shortresult = '<p class="lead">Notacja nawiasowa: <b>'+expr+'</b> | Notacja Łukasiewicza: <b>';
                        //var b = a.split("").reverse().join("");
                        //var b = a.replace("/(/g",")"); 
                        let b = expr.split("").reverse(); //robię tablicę z pobranego ciągu

                        //pętlą odwracam nawiasy
                        for(let j=0 ; j < b.length ; j++ ){
                            if(b[j] == "(")
                                b[j] = ")";
                            else if(b[j] == ")")
                                b[j] = "(";
                        }

                        let flag = 0;                               //flaga do liczenia wysokości stosu
                        stack.push('(');
                        //flag++;
                        //console.log(stack);
                        //let i=0;
                        b.push(')');                                //na koniec odwróconego wyrażenia dodaje ) który będzie się zamykał razem z tym pierwszym na stosie
                        //do
                         for(let i=0 ; i < b.length; i++){

                            if(b[i] != '¬' && b[i] != '∧' && b[i] != '∨' && b[i] != '⇒' && b[i] != '⇔' && b[i] != '(' && b[i] != ')') {
                                prefix.push(b[i]);
                               // console.log("stos");
                               // console.log(stack);
                               // console.log("prefix");
                               // console.log(prefix);
                               // console.log("flaga");
                               // console.log(flag);
                            }
                            else
                                switch(b[i])
                                {
                                    case '⇒': 
                                        if(stack[flag] == '('){
                                            stack.push(b[i]);
                                            flag++;

                                        }else{
                                            while(stack[flag] == '⇔' || stack[flag] == '⇒' || stack[flag] == '¬' || stack[flag] == '∧' || stack[flag] == '∨'){
                                                prefix.push(stack[flag]);
                                                flag--;
                                                stack.pop();   
                                            }
                                            stack.push(b[i]);
                                            flag++;
                                        }                                       
                                        break;

                                    case '⇔':
                                        if(stack[flag] == '('){
                                            stack.push(b[i]);
                                            flag++;

                                        }else {
                                            while(stack[flag] == '⇔' || stack[flag] == '⇒' || stack[flag] == '¬' || stack[flag] == '∧' || stack[flag] == '∨'){
                                                prefix.push(stack[flag]);
                                                flag--;
                                                stack.pop();
                                            }  
                                                stack.push(b[i]);
                                                flag++;                                      
                                        }

                                        break;
                                    
                                    case '∨':

                                    if(stack[flag] == '⇔' || stack[flag] == '⇒' || stack[flag] == '('){
                                            stack.push(b[i]);
                                            flag++;
                                        }else {
                                            while(stack[flag] == '¬' || stack[flag] == '∨' || stack[flag] == '∧'){
                                                prefix.push(stack[flag]);
                                                flag--;
                                                stack.pop();
                                            }  
                                                stack.push(b[i]);
                                                flag++;                                      
                                        }

                                        break;
                                    
                                    case '∧':

                                    if(stack[flag] == '⇔' || stack[flag] == '⇒' || stack[flag] == '('){
                                            stack.push(b[i]);
                                            flag++;
                                        }else {
                                            while(stack[flag] == '¬' || stack[flag] == '∨' || stack[flag] == '∧'){
                                                prefix.push(stack[flag]);
                                                flag--;
                                                stack.pop();
                                            }  
                                                stack.push(b[i]);
                                                flag++;                                      
                                        }
                                        break;
                                    
                                    case '¬':
                                        stack.push(b[i]);
                                        flag++;
                                        break;

                                    case '(':
                                        stack.push(b[i]);   //przesyłamy operator na stos
                                        flag++;
                                        break;
                                    
                                    case ')':
                                        while(stack[flag] != '('){      //dopóki na stosie element jest różny od '('
                                           prefix.push(stack[flag]);    //przesyłam operator ze stosu na wyjście
                                           stack.pop();                 //usuwam element poprzednio wypuszczony na wyjście
                                           flag--;                      //zmniejszam flagę o 1
                                        }
                                        if(stack[flag] == '('){
                                            stack.pop();
                                            flag--;
                                        }
                                        break;
                                }

                        //tutaj wypisywanie rekordów tabeli
                        table_help = '<tr><td>'+i+'</td><td>'+b[i]+'</td><td>'+stack.join("")+'</td><td>'+prefix.join("")+'</td></tr>';
                        table = table+table_help;
                            
                        }

                        
                        table = table+'<tr><td>-</td><td>-</td><td>-</td><td>'+prefix.reverse().join("")+'</td></tr>';

                        //zamiana na notację symboliczną 
                        for(let i=0 ; i < prefix.length ; i++) {
                            switch(prefix[i]){
                                case '⇒': 
                                    prefix[i] = 'C';
                                break;
                                case '⇔': 
                                    prefix[i] = 'E';
                                break;
                                case '∨': 
                                    prefix[i] = 'A';
                                break;
                                case '∧': 
                                    prefix[i] = 'K';
                                break;
                                case '¬': 
                                    prefix[i] = 'N';
                                break;
                            }
                        }

                        console.log(prefix.reverse().join(""));
                        table = table+'<tr><td>-</td><td>-</td><td>-</td><td>'+prefix.reverse().join("")+'</td></tr>';
                        table = table+'</tbody></table>';
                        shortresult=shortresult+prefix.join("")+'</b></p>';
                        var element2 = document.getElementById("result");
                        element2.innerHTML = shortresult;
                        var element = document.getElementById("row");
                        element.innerHTML = table;
                        console.log(table);
                    }

                    // druga funkcja

                    function test2(){

                        //document.getElementById("result").style.visibility="visible";
                        document.getElementById("row").style.visibility="visible";
                        let expr = document.getElementById("expression").value; //pobrane wyrażenie z pola
                        let prefix = []; //tablica z gotowym wyrażeniem
                        let stack = []; //stos
                        let table = '<div class="col-md-12"><table class="table table-striped table-bordered"><thead class= "thead-dark text-left"><tr><th scope="col">Lp.</th><th scope="col">Wejście</th><th scope="col">Stos</th></tr></thead><tbody id="tabeladata" class="text-left">'; //zmienna do budowania tabeli
                        let shortresult = '<p class="lead">Notacja Łukasiewicza: <b>'+expr+'</b> | Notacja nawiasowa: <b>';
                        let table_help = '' //zmienna pomocnicza do budowania tabeli
                        let b = expr.split("").reverse(); //robię tablicę z pobranego ciągu

                        let flag = 0;                               //flaga do liczenia wysokości stosu
                        //console.log(b);
                        let p1 = '';
                        let p2 = '';
                        let result = '';
                        for(let i=0 ; i < b.length; i++){
                            //console.log(stack)

                            if(b[i] == 'N' || b[i] == 'K' || b[i] == 'A' || b[i] == 'C' || b[i] == 'E') {

                                console.log(flag);

                                switch(b[i])
                                {
                                    case 'C':
                                        p1 = stack[--flag];
                                        //console.log(p1);
                                        p2 = stack[--flag];
                                        //console.log(p2);
                                        //flag--;
                                        result = '('+p1+b[i]+p2+')';
                                        //console.log(result);
                                        stack.pop();
                                        stack.pop();
                                        stack.push(result);
                                        flag++;
                                        //console.log(stack);
                                                  
                                        break;

                                    case 'E':
                                        p1 = stack[--flag];
                                        //console.log(p1);
                                        p2 = stack[--flag];
                                        //console.log(p2);
                                        //flag--;
                                        result = '('+p1+b[i]+p2+')';
                                        //console.log(result);
                                        stack.pop();
                                        stack.pop();
                                        stack.push(result);
                                        flag++;
                                        //console.log(stack);
                                        
                                        break;
                                    
                                    case 'A':
                                        p1 = stack[--flag];
                                        //console.log(p1);
                                        p2 = stack[--flag];
                                        //console.log(p2);
                                        //flag--;
                                        result = '('+p1+b[i]+p2+')';
                                        //console.log(result);
                                        stack.pop();
                                        stack.pop();
                                        stack.push(result);
                                        flag++;
                                        //console.log(stack);

                                        break;
                                    
                                    case 'K':
                                        p1 = stack[--flag];
                                        //console.log(p1);
                                        p2 = stack[--flag];
                                        //console.log(p2);
                                        //flag--;
                                        result = '('+p1+b[i]+p2+')';
                                        //console.log(result);
                                        stack.pop();
                                        stack.pop();
                                        stack.push(result);
                                        flag++;
                                        //console.log(stack);

                                        break;
                                    
                                    case 'N':
                                        p1 = stack[--flag];
                                        result = '('+b[i]+p1+')';
                                        stack.pop();
                                        stack.push(result);
                                        flag++;
                                       
                                        break;

                                }



                            
                            }else{
                                stack.push(b[i]);
                                flag++;
                            }
                            //    prefix.push(b[i]);

                            //tutaj wypisywanie rekordów tabeli
                            table_help = '<tr><td>'+i+'</td><td>'+b[i]+'</td><td>'+stack+'</td></tr>'; //stack.join("")
                            table = table+table_help;
                            
                        }

                        console.log(stack.join(""));
                        let infix = stack.join("");
                        infix = infix.split("");
                        console.log(infix);

                        
                        //table = table+'<tr><td>-</td><td>-</td><td>'+stack.reverse().join("")+'</td></tr>';


                        //zamiana na notację symboliczną 
                        for(let i=0 ; i < infix.length ; i++) {
                            switch(infix[i]){
                                case 'C': 
                                    infix[i] = '⇒';
                                break;
                                case 'E': 
                                    infix[i] = '⇔';
                                break;
                                case 'A': 
                                    infix[i] = '∨';
                                break;
                                case 'K': 
                                    infix[i] = '∧';
                                break;
                                case 'N': 
                                    infix[i] = '¬';
                                break;
                            }
                        }

                        console.log(infix.join(""));

                        //console.log(prefix.reverse().join(""));
                        table = table+'<tr><td>-</td><td>-</td><td>'+infix.join("")+'</td></tr>';
                        table = table+'</tbody></table>';
                        shortresult=shortresult+infix.join("")+'</b></p>';
                        var element2 = document.getElementById("result");
                        element2.innerHTML = shortresult;
                        var element = document.getElementById("row");
                        element.innerHTML = table;
                        //console.log(table);
                    }


                    
                    </script>
                    
                </label>
            </div>   
         </div>
         <div id="row">
                
                            
                        
                </div>
            </div>








    </div>           
</body>
</html>
